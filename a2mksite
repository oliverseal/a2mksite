#!/usr/bin/env python

#add site to /etc/sites-available
#update hosts
import getopt, sys, re
from os import path, makedirs, system

APACHE_TEMPLATE_PATH = '/usr/share/a2mksite/apache-templates'
APACHE_SITES_AVAILABLE_PATH = '/etc/apache2/sites-available'
HOSTS_FILE_PATH = '/etc/hosts'
WEB_BASE = '/var/www/sites/'

verbose = False

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hv', ['help', 'verbose'])
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like 'option -a not recognized'
        usage()
        sys.exit(2)
    output = None
    verbose = False
    for o, a in opts:
        if o == '-v':
            verbose = True
            #print('Verbose ON')
        else:
            print('Unknown option %s' % o)
            args.remove(o)
            usage()
            sys.exit()

    #gotta have at least 2 args
    if len(args) < 1 or len(args) > 3:
        usage()
        sys.exit()

    #read templates
    hostname = args[0]
    if verbose: print('Hostname: %s' % hostname)

    if len(args) == 2:
        vhost_path = path.abspath(args[1])
    else:
        vhost_path = WEB_BASE + args[0]

    if verbose: print('Path: %s' % vhost_path)

    if len(args) == 3:
        index = args[2]
    else:
        index = 'index.html index.php'

    if verbose: print('Index: %s' % index)

    if verbose: print('Creating directories...')
    
    try:
        directory = vhost_path + '/public'
        makedirs(directory)
        if verbose:
            print('Directory %s has been successfully created' % directory)
    except IOError, err:
        print('Error creating directory "%s". %s' % (directory, err))
        sys.exit(500)

    try:
        directory = vhost_path + '/log'
        makedirs(directory)
        if verbose:
            print('Directory %s has been successfully created' % directory)
    except IOError, err:
        print('Error creating directory "%s". %s' % (directory, err))
        sys.exit(500)


    template_file_path = APACHE_TEMPLATE_PATH + '/vhost-template.conf'
    vhost_file_path = '%s/%s.conf' % (APACHE_SITES_AVAILABLE_PATH, hostname)

    vhost_successful = write_vhost(template_file_path, vhost_file_path, hostname, vhost_path, index)

    #vhost is in, now lets write the hosts
    if vhost_successful:
        append_host(hostname)

    if verbose: print('Host %s added successfully.' % hostname)
    system('a2ensite %s.conf' % hostname)

    if(path.isfile('/etc/init.d/apache2')):
        system('/etc/init.d/apache2 reload')
    elif(path.isfile('/etc/init.d/httpd')):
        system('/etc/init.d/httpd reload')


def write_vhost(template_file_path, vhost_file_path, hostname, vhost_path, index='index.html'):
    """
    Writes a vhost.conf into the provided ``vhost_file_path`` based on the template provided in ``template_file_path``.

    The file at ``template_file_path`` should have variables ``${hostname}``, ``${vhost_path}``, and ``${index}`` in the appropriate places.

    :param template_file_path: string Path to a template file that is essentially at vhost.conf file with some extra variables.
    :param vhost_file_path: string Path to write the filled out template file to. On Linux systems this is typically ``/etc/apache2/sites-available/${hostname}.conf``. This will overwrite any file in that path.
    :param hostname: string The hostname to target.
    :param vhost_path: string The path to the site itself.
    :param index: string The DirectoryIndex directive to provide. This defaults to ``index.html`` currently.
    """
    vhost_entry = None
    try:
        fh = open(template_file_path)
        template = fh.read()
        fh.close()

        vhost_entry = template
        vhost_entry = re.sub(r'\$\{hostname\}', hostname, vhost_entry)
        vhost_entry = re.sub(r'\$\{vhost_path\}', vhost_path, vhost_entry)
        vhost_entry = re.sub(r'\$\{index\}', index, vhost_entry)
    except IOError, err:
        print('Error accessing apache template file in "%s". %s' % (template_file_path, err))
        sys.exit(404)
        return False


    if vhost_entry is not None:
        try:
            fh = open(vhost_file_path, 'w')
            fh.write(vhost_entry)
            fh.close()

        except IOError, err:
            print('Error writing vhost file in "%s". %s' % (vhost_file_path, err))
            sys.exit(500)
            return False

    return True

def append_host(hostname):
    """
    Uses the constant ``HOSTS_FILE_PATH`` to find the ``hosts`` file for this system. Appends the ``hostname`` pointing to 127.0.0.1 to it.

    This looks for ``# Managed by a2mksite`` within the hosts file and only manages entries below it. If the string is not found, it is added.
    """
    #open connection
    HOST_LINE = '# Managed by a2mksite'
    try:
        fh = open(HOSTS_FILE_PATH, 'r+a')
        host_line = fh.readline()
        #look for '# Managed by a2mksite' line
        line_found = False
        while host_line != '':
            if host_line.startswith(HOST_LINE):
                line_found = True
                break;
            host_line = fh.readline()


        if line_found:
            #read contents in after it
            host_found = False
            while host_line != '':
                if host_line.endswith(hostname):
                    host_found = True
                    break;
                host_line = fh.readline()

            #if an entry for host exists, then exit
            if host_found:
                if verbose: print('Hostname was already found in %s' % HOSTS_FILE_PATH)
                fh.close()
                return
        else:
            #if not append it
            fh.write(HOST_LINE + '\n');

        #if we make it here there wasn't a host in the file
        fh.write('127.0.0.1    %s\n' % hostname)

        fh.close()

    except IOError, err:
        print('Error writing hosts file in "%s". %s' % (HOSTS_FILE_PATH, err))
        sys.exit(500)



def usage():
    print('Usage: a2mksite [-v] hostname [path] [index]')

if __name__ == '__main__':
    main()
